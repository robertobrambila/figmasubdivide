var __awaiter=this&&this.__awaiter||function(t,i,e,n){return new(e||(e=Promise))(function(o,s){function a(t){try{c(n.next(t))}catch(t){s(t)}}function r(t){try{c(n.throw(t))}catch(t){s(t)}}function c(t){var i;t.done?o(t.value):(i=t.value,i instanceof e?i:new e(function(t){t(i)})).then(a,r)}c((n=n.apply(t,i||[])).next())})};function lerp(t,i,e){return{x:(i.x-t.x)*e+t.x,y:(i.y-t.y)*e+t.y}}function divideSegment(t,i,e){const n=1/(e+1);let o=[];for(var s=n;s<1;s+=n)o.push(lerp(t,i,s));return o}function loadSettings(){return __awaiter(this,void 0,void 0,function*(){let t=yield figma.clientStorage.getAsync("divisions");t?(figma.ui.postMessage({divisionCount:t}),console.log("Saved Divisions: "+t)):console.log("Settings not saved.")})}figma.showUI(__html__,{width:300,height:90}),loadSettings().then(()=>{figma.ui.onmessage=(t=>__awaiter(this,void 0,void 0,function*(){if("subdivide-path"===t.type){if(figma.currentPage.selection.length<=0)return void figma.ui.postMessage(1001);for(const e of figma.currentPage.selection){const n=figma.flatten([e]);let o=[];n.vectorNetwork.segments.forEach(i=>{const e=n.vectorNetwork.vertices[i.start],s=n.vectorNetwork.vertices[i.end],a={x:e.x,y:e.y},r={x:s.x,y:s.y};o.push(a);const c=divideSegment(a,r,t.divisionCount);for(var u=0;u<t.divisionCount;u++)o.push(c[u]);o.push(r)});let s="M "+o[0].x+" "+o[0].y+" ";for(var i=0;i<o.length-1;i++)s+="L "+o[i+1].x+" "+o[i+1].y+" ";const a={windingRule:n.vectorPaths[0].windingRule,data:s.trimRight()};n.vectorPaths=[a],yield figma.clientStorage.setAsync("divisions",t.divisionCount),figma.closePlugin()}}}))});